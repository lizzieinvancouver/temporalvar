# nonstationary tauP, change once not doing stationary+nonstationary run
qns <- seq(2, 20, length.out=nyrs2)
tauPns <- rbeta(nyrs2, p, qns) # yes, it takes a vector! Yay!
plot(tauPns~c(1:50))
tauP <- c(tauPs, tauPns)
##
## Within-growing season dynamics set-up
##
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)
B <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass
# through growing season (ndays)
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp
N[1,] <- N0  #initialize
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y
##
## set-up for different coexistence mechanisms
##
BnoC <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass
RnoC <- array(rep(0), dim=c(nyrs,nsp,tsteps)) # where B is an array with yr (nyrs), spp biomass
BnoCfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y
tauIstar <- matrix(rep(0),nyrs,nsp)
#  Bnocomp <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y
E <- matrix(rep(0),nyrs-1,nsp)
C <- matrix(rep(0),nyrs-1,nsp)
##
## change to mapply someday?
## for now, a loop
## Better to use ODE solver within each year?
##
#COMPETITION MODEL
for (y in c(1:(nyrs-1))){
g <- gmax*exp(-h*(tauP[y]-tauI)^2)  #germination fraction in year y
k<-1
R[y,k] <- R0[y]
B[y,,k] <- b*g*N[y,]
while (R[y,k]>min(Rstar)){
f <- (a*R[y,k]^theta)/(1+a*u*R[y,k]^theta)
B[y,,k+1] <- B[y,,k]+(c*f-m)*B[y,,k]*dt
R[y,k+1] <- R[y, k] -dt*(t(B[y,,k]) %*% f + eps*R[y,k])
R[y,k+1] <- R[y,k+1]*(R[y,k+1]>0)
k <- k+1
}
Bfin[y,] <- apply(B[y,,], 1, max)  #final biomass
N[y+1,] <- s*(N[y,]*(1-g)+phi*Bfin[y,])  #convert biomass to seeds and overwinter
N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero
}
#   #NO INTERSPECIFIC COMPETITION
#   #note that bc spp are all currently the same, all outcomes are equal - but should this be true since each species has a different initial condition bc of germination?
#   for (y in c(1:(nyrs-1))){
#     for (q in c(1:nsp)){
#       g <- gmax[q]*exp(-h[q]*(tauP[y]-tauI[q])^2)  #germination fraction in year y
#       k<-1
#       RnoC[y,q,k] <- R0[y]
#       BnoC[y,q,k] <- b[q]*g*N[y,q]
#       while (RnoC[y,q,k]>min(Rstar[q])){
#         f <- (a[q]*RnoC[y,q,k]^theta[q])/(1+a[q]*u[q]*RnoC[y,q,k]^theta[q])
#         BnoC[y,q,k+1] <- BnoC[y,q,k]+(c[q]*f-m[q])*BnoC[y,q,k]*dtnc
#         RnoC[y,q,k+1] <- RnoC[y,q,k] -dtnc*(t(BnoC[y,q,k]) %*% f + eps*RnoC[y,q,k])
#         RnoC[y,q,k+1] <- RnoC[y,q,k+1]*(RnoC[y,q,k+1]>0)
#         k <- k+1
#       }
#       BnoCfin[y,] <- max(BnoC[y,q,])  #max biomass
#     }
#  }
#
#   #Calculate E and C for each species and y  #NOTE: igonoring the per capita Bfin prob
#   for (y in (1:nyrs-1)){
#     g <- gmax*exp(-h*(tauP[y]-tauI)^2)
#     #pcBnoCfin <- BnoCfin/(g*phi*N[y,])  #per capita BnoCfin
#     #pcBnoCfin <- pcBnoCfin*(is.finite(pcBnoCfin))  #make infinities 0
#     #print(paste("y=",y," ",sum(is.infinite(pcBnoCfin))))
#     #pcBfin <- Bfin/(g*phi*N[y,])        #per capita Bfin
#     #E[y,] <- g*(BnoCfin[y,] - s)
#     #C[y,] <- E[y,]/(g*(Bfin[y,] - s))
#     E[y,] <- log(g*phi*(BnoCfin[y,])+1)
#     C[y,] <- log(Bfin[y,]/BnoCfin[y,]+1)
#   }
#
#   #Calculate Covariance for sp i as invader
#   gmean_sta <-array(rep(0),nsp)
#   gmean_nonsta <-array(rep(0),nsp)
#   covECi_sta <-array(rep(0),nsp)
#   covECi_nonsta <-array(rep(0),nsp)
#   par(mfrow=c(4,5))
#   for (q in c(1:nsp)){
#     gmean_sta[q] <- mean(gmax[q]*exp(-h[q]*(tauP[1:nyrs1]-tauI[q])^2))
#     #covar of Ci and Ei for each species i as an invader
#     covECi_sta[q] <- cov(E[1:nyrs1,q],C[1:nyrs1,q])
#     plot(E[1:nyrs1,q],C[1:nyrs1,q])
#   }
#   par(mfrow=c(4,5))
#   for (q in c(1:nsp)){
#     gmean_nonsta[q] <- mean(gmax[q]*exp(-h[q]*(tauP[(nyrs1):(nyrs-1)]-tauI[q])^2))
#     #covar of Ci and Ei for each species i as an
#     index <- !(is.na(C[(nyrs1):(nyrs-1),q]))
#     covECi_nonsta[q] <- cov(E[index,q],C[index,q])
#     plot(E[(nyrs1):(nyrs-1),q],C[(nyrs1):(nyrs-1),q])
#   }
#
#
#   #Calculate storage effect:  Delta I/di
#   StEff_sta <- mean(s*(1-gmean_sta)*covECi_sta) - s*(1-gmean_sta)*covECi_sta
#   StEff_nonsta <- mean(s*(1-gmean_nonsta)*covECi_nonsta) - s*(1-gmean_nonsta)*covECi_nonsta
#
#   mui <- apply(E,FUN=mean,MARGIN=2)-log(s)
#   EquilMech <- mui - mean(mui)
modelruns[[j]] <- list(crossyrsvars, Bfin, E)
# could also make each run a multi-part dataframe with common names
# so something like:
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin
}
# between years plot
dev.new(width=14, height=10)
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),
xlab="year", ylab="Abundance", type="n")
for (i in 1:nsp) {
lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)
}
dev.new(width=14, height=10)
range=c(1:(tsteps/3))
plot(R[1,range]~range, ylim=c(min(R), max(R)),
xlab="step, step, step", ylab="Resource", type="n")
for (i in 2:nyrs) {
lines(R[i,range]~range, col=colerz[i], lty=lspbyrs, lwd=lwd)
}
# within years plots
# tweaked a little to make biomass differences among years clearer
dev.new(width=14, height=10)
par(mfrow=c(3,3))
par(mar=c(5, 4, 4, 8) + 0.1)
selectyrs <- seq(1, nyrs, by=floor(nyrs/8))
yrlength <- ndays/dt
for (yr in seq_along(selectyrs)){
allsp <- B[selectyrs[yr], ,]
plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)),
xlab="step, step, step",  ylab="Abundance", type="n",
main=paste("year: ", selectyrs[yr], sep=""))
for (sp in c(1:nsp)){
lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),
col=colerz[sp])
}
par(new=TRUE)
plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",
ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",
col=rcol, lty=lresbyrs, lwd=lwd)
raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)
axis(4, at=raxis, labels=round(raxis, digits=2))
mtext("Resource", side=4, line=3, cex=0.75)
}
# two options for overlay histograms
par(mfrow=c(1,1))
dev.new(width=5, height=6)
# (1) using the base package (I hate this, let's rm it)
maxhist <- max(tauI, tauP)*1.1
tauIfin <- tauI[which(Bfin[max(y),]>0)]
tauIlosers <- tauI[which(Bfin[max(y),]<=0)]
hist(tauIfin, col=rgb(1, 0, 0, 0.5), xlim=c(0, maxhist), ylim=c(0, nsp),
main=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "), xlab="taus")
hist(tauP, col=rgb(0, 0, 1, 0.5), add=TRUE)
hist(tauIlosers, col=rgb(0, 0, 1, 0.5), add=TRUE)
dev.new(width=7, height=6)
# (2) using ggplot, which really is good for this sort of thing
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +
geom_density(data=tauP.df[1:100,], aes(tauP),  alpha = 0.2) +
geom_density(data=tauP.df[101:150,], aes(tauP),  alpha = 0.4) +
labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
## notes for lizzie (by lizzie):
# length of vectors is nsp
# while loop runs through season until minimum R* is met
# while loop runs until SECOND species is below its R*
# but we should run it so at R* each species converts to seeds (maybe?)
# for now we convert max biomass to seeds
# y is years
# t is within years
# %% is mod (integer division: it's the remainder once a even division)
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
N[nyrs1]>0
sum(N[nyrs1,]>0)
print(c("Number coexisting under stationary",sum(N[nyrs1]>0)),"Number coexisting after nonstationary",sum(N[nyrs]>0))
print(c("Number coexisting under stationary",sum(N[nyrs1]>0), "out of",nsp,".  Number coexisting after nonstationary",sum(N[nyrs]>0), "out of", nsp))
sum(N[nyrs1]>0)
matplot(N)
matplot(N[25:nyrs])
matplot(N[25:nyrs,])
options(stringsAsFactors=FALSE)
library(ggplot2)
library(deSolve)
nonsta = 0  #flag for stationary (0) vs nonstationary (=num yrs nonstationary)
nsp = 2  #when nsp=2, tauI is assigned known values from chesson 2004
source("getRunParms.R") #define runtime parameters
source("../sourcefiles/getRunParms.R") #define runtime parameters
source("..\sourcefiles\getRunParms.R") #define runtime parameters
source("..sourcefiles/getRunParms.R") #define runtime parameters
source("./sourcefiles/getRunParms.R") #define runtime parameters
source("./sourcefiles/getGraphParms.R")  #define graphics parameters
source("./sourcefiles/getEnvt.R")  #get constant and time-varying envt parms
source("./sourcefiles/getSpecies.R")  #get species characteristics and Rstar
N0 <- rep(100,nsp)          # initial number of seeds (per meter square?)
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp
N[1,] <- N0  #initialize
rcrt <- matrix(rep(0),nyrs,nsp) # recruitment in year y
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y
B0  <- matrix(rep(0),nyrs,nsp) # biomass at beginning of year y
Bout <- list() #each year has a dataframe with time,R(t),Bi(t) of dims(2+nsp,tsteps)
source("./sourcefiles/ResCompN.R") # define within-season ode solver
source("ResCompN.R") # define within-season ode solver
source("NoCompN.R")  # define within-season ode solver for no competition
BnoCout <- list()
BnoC <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y
E <- matrix(rep(0),nyrs,nsp)
C <- matrix(rep(0),nyrs,nsp)
for (y in c(1:(nyrs-1))){
#get initial biomass for year y
B0[y,] <- b*g[y,]*N[y,]
#use deSolve for ResCompN
R<-R0[y]
B<-B0[y,]
State<-c(R=R,B=B)
Time <- seq(0,ndays,by=dt)
#Bout[[y]] <- as.data.frame(ode(func = ResCompN, y = State, parms = Pars, times = Time))
Bout[[y]] <- as.data.frame(lsodar(func = ResCompN, y = State, parms = Pars, times = Time,rootfun=rootfun))
Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass
#use deSolve for NoCompN to solve for noCompetition condition
#would be faster to used solved equation, but calculations were coming out wrong
tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))
TimeNC <- seq(0,max(tstar)+5*dt,by=dt)
BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))
BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)
rcrt[y,] <- s*g[y,]*(phi*Bfin[y,]-1)   #to recruit, convert biomass to seeds and overwinter
#calculate E and C
#tstar is when species cross their Rstar threshold and we stop the season under the no competition condition
#tstar is correct: checked against ODE solver, it is when the  biomass starts decreasing
#BUT BnoC still doesn't make sense
#e1 <- 1+a*u*R0[y]^theta
#e2 <- 1+a*u*R0[y]^theta*exp(-eps*tstar*theta)
#e3 <- c/(u*eps*theta)
#BnoC[y,] <- B0[y,] * e1^(-e3) * e2^(-e3) * exp(-m*tstar)
E[y,] <- s*g[y,]*(phi*BnoC[y,]-1)      #the -1 accounts for the loss of adults to germination
C[y,] <- E[y,]/rcrt[y,]
N[y+1,] <- N[y,]*(s + rcrt[y,])    #N(t+1) = N(t)* (survival + recruitment)
N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero
}
library(deSolve)
y=1
B0[y,] <- b*g[y,]*N[y,]
#use deSolve for ResCompN
R<-R0[y]
B<-B0[y,]
State<-c(R=R,B=B)
Time <- seq(0,ndays,by=dt)
Bout[[y]] <- as.data.frame(lsodar(func = ResCompN, y = State, parms = Pars, times = Time,rootfun=rootfun))
Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass
tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))
TimeNC <- seq(0,max(tstar)+5*dt,by=dt)
BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))
BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)
rcrt[y,] <- s*g[y,]*(phi*Bfin[y,]-1)   #to recruit, convert biomass to seeds and overwinter
for (y in c(1:(nyrs-1))){
#get initial biomass for year y
B0[y,] <- b*g[y,]*N[y,]
#use deSolve for ResCompN
R<-R0[y]
B<-B0[y,]
State<-c(R=R,B=B)
Time <- seq(0,ndays,by=dt)
#Bout[[y]] <- as.data.frame(ode(func = ResCompN, y = State, parms = Pars, times = Time))
Bout[[y]] <- as.data.frame(lsodar(func = ResCompN, y = State, parms = Pars, times = Time,rootfun=rootfun))
Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass
#use deSolve for NoCompN to solve for noCompetition condition
#would be faster to used solved equation, but calculations were coming out wrong
tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))
TimeNC <- seq(0,max(tstar)+5*dt,by=dt)
BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))
BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)
rcrt[y,] <- s*g[y,]*(phi*Bfin[y,]-1)   #to recruit, convert biomass to seeds and overwinter
#calculate E and C
#tstar is when species cross their Rstar threshold and we stop the season under the no competition condition
#tstar is correct: checked against ODE solver, it is when the  biomass starts decreasing
#BUT BnoC still doesn't make sense
#e1 <- 1+a*u*R0[y]^theta
#e2 <- 1+a*u*R0[y]^theta*exp(-eps*tstar*theta)
#e3 <- c/(u*eps*theta)
#BnoC[y,] <- B0[y,] * e1^(-e3) * e2^(-e3) * exp(-m*tstar)
E[y,] <- s*g[y,]*(phi*BnoC[y,]-1)      #the -1 accounts for the loss of adults to germination
C[y,] <- E[y,]/rcrt[y,]
N[y+1,] <- N[y,]*(s + rcrt[y,])    #N(t+1) = N(t)* (survival + recruitment)
N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero
}
par(mfrow=c(1,1))
dev.new(width=14, height=10)
par(mar=c(5,4,4,5)+.1)
plot(Bfin[,1]~c(1:nyrs), ylim=c(min(Bfin), max(Bfin)),
xlab="year", ylab="Abundance", type="n")
for (i in 1:nsp) {
lines(Bfin[,i]~c(1:nyrs), col=colerz[i], lty=lspbyrs, lwd=lwd)
}
### Started 10 July 2011 ###
### By Lizzie & Megan ###
## VarEnvironments & Coexistence ##
# safety feature(s)
options(stringsAsFactors=FALSE)
# packages
library(ggplot2)
library(deSolve)
set.seed(2)
## Setting up loop for multiple model runs
# To do still:
# (1) add in everything crossyrsvars need (was lazy about this)
# (2) add in resource stuff to withinyrs
# (3) decide on list for each run, versus some other format
#Temporarily disabling the multiple runs
#modelruns <- list() # place to store output of runs
#nruns <- 2 # number of model runs to do
#for (j in c(1:nruns)){ # assuming, we will vary species characteristics between yrs ...
#Stationarity in this run?
nonsta = 0  #flag for stationary (0) vs nonstationary (=num yrs nonstationary)
#Number of species to start?
nsp = 20  #when nsp=2, tauI is assigned known values from chesson 2004
source("getRunParms.R") #define runtime parameters
source("getGraphParms.R")  #define graphics parameters
source("getEnvt.R")  #get constant and time-varying envt parms
source("getSpecies.R")  #get species characteristics and Rstar
#Define arrays
#interannual dynamics set-up (R0 is in getEnvt.R)
N0 <- rep(1,nsp)          # initial number of seeds (per meter square?)
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp
N[1,] <- N0  #initialize
rcrt <- matrix(rep(0),nyrs,nsp) # recruitment in year y
rcrt0 <- matrix(rep(0),nyrs,nsp) # recruitment WO competition in year y
## Within-season dynamics set-up
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y
B0  <- matrix(rep(0),nyrs,nsp) # biomass at beginning of year y
Bout <- list() #each year has a dataframe with time,R(t),Bi(t) of dims(2+nsp,tsteps)
source("ResCompN.R") # define within-season ode solver
source("NoCompN.R")  # define within-season ode solver for no competition
## set-up for different coexistence mechanisms
#I have considered 3 defns for E and C, but only one isn't problematic numerically
#defn1: E= ln(rcrt0), C=ln(rcrt0/rcrt)  ->compare recruitment w and wo comp
#defn2: E= ln(g), C=-ln(phi*Bfin-s) -> this the easiest division of the eqn for rcrt
#defn3: E =ln(g), C=-ln(phi*Bfin)  -> in this case, (1-g) is included in the seedback lifespan
#defn4: E = ln(g*phi*BnoC), C=ln(BnoC/Bfin)
BnoCout <- list()
BnoC <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y
E <- matrix(rep(0),nyrs,nsp)
C <- matrix(rep(0),nyrs,nsp)
for (y in c(1:(nyrs-1))){
#get initial biomass for year y
B0[y,] <- b*g[y,]*N[y,]
#use deSolve for ResCompN
R<-R0[y]
B<-B0[y,]
State<-c(R=R,B=B)
Time <- seq(0,ndays,by=dt)
Bout[[y]] <- as.data.frame(ode(func = ResCompN, y = State, parms = Pars, times = Time))
#Bout[[y]] <- as.data.frame(lsodar(func = ResCompN, y = State, parms = Pars, times = Time,rootfun=rootfun))
Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass
N[y+1,] <- N[y,]*s*(1-g[y,]) + phi*Bfin[y,]    #note Bfin already includes N(t) as init cond
N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero
#use deSolve for NoCompN to solve for noCompetition condition
#would be faster to used solved equation, but calculations were coming out wrong
#tstar is when species cross their Rstar threshold and we stop the season under the no competition condition; checked against ODE solver, it is when the  biomass starts decreasing
tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))
TimeNC <- seq(0,max(tstar)+5*dt,by=dt)
BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))
BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)
rcrt[y,] <- g[y,]*(phi*Bfin[y,]-s)   #to recruit, convert biomass to seeds and overwinter
#rcrt0[y,] <- g[y,]*(phi*BnoC[y,]-s)   #no-competition recruitment
#calculate E and C
E[y,] <- log(g[y,]*phi*BnoC[y,])         #defn 4
C[y,] <- log(BnoC[y,]/Bfin[y,])         #defn 4
}
#modelruns[[j]] <- list(crossyrsvars, Bfin, E)
# could also make each run a multi-part dataframe with common names
# so something like:
# modelruns[[paste("crossyrs", j, sep="")]] <- crossyrsvars
# modelruns[[paste("withinyrs", j, sep="")]] <- Bfin
#}
source("plotNyears.R")  #plots dynamics of seedbank abundance over years
source("plotBinSeason.R")  #plot within season dynamics of biomass & R for a subset of years
source("plotBwCnoC.R")  #plot within season biomass resource dynamics w and wo competition
source("plotBinSeason_Lizzie.R")
###Megan stopped tweaking plots here, but they will need to be adjusted for new within-year output structure from ode
# within years plots
# tweaked a little to make biomass differences among years clearer
# dev.new(width=14, height=10)
# par(mfrow=c(3,3))
# par(mar=c(5, 4, 4, 8) + 0.1)
# selectyrs <- seq(1, nyrs, by=floor(nyrs/8))
# yrlength <- ndays/dt
# for (yr in seq_along(selectyrs)){
#     allsp <- B[selectyrs[yr], ,]
#     plot(B[selectyrs[yr], 1,]~c(1:yrlength), ylim=c(min(allsp), max(B)),
#         xlab="step, step, step",  ylab="Abundance", type="n",
#         main=paste("year: ", selectyrs[yr], sep=""))
#     for (sp in c(1:nsp)){
#         lines(B[selectyrs[yr], sp ,]~c(1:yrlength), ylim=c(min(allsp), max(B)),
#             col=colerz[sp])
#     }
#     par(new=TRUE)
#     plot(R[selectyrs[yr],]~c(1:yrlength), axes=FALSE, xlab="", ylab="",
#         ylim=c(min(R[selectyrs[yr],]), max(R[selectyrs[yr],])), type="l",
#         col=rcol, lty=lresbyrs, lwd=lwd)
#     raxis <- seq(0, max(R[selectyrs[yr],]), by=max(R[selectyrs[yr],])/10)
#     axis(4, at=raxis, labels=round(raxis, digits=2))
#     mtext("Resource", side=4, line=3, cex=0.75)
# }
dev.new(width=7, height=6)
# (2) using ggplot, which really is good for this sort of thing
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)
if (nonsta>0){
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +
geom_density(data=tauP.df[1:(nyrs-nonsta),], aes(tauP),  alpha = 0.2) +
geom_density(data=tauP.df[(nonsta+1):nyrs,], aes(tauP),  alpha = 0.4) +
labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
}else {
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +
geom_density(data=tauP.df[1:nyrs,], aes(tauP),  alpha = 0.2) +
labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
}
## notes for lizzie (by lizzie):
# length of vectors is nsp
# while loop runs through season until minimum R* is met
# while loop runs until SECOND species is below its R*
# but we should run it so at R* each species converts to seeds (maybe?)
# for now we convert max biomass to seeds
# y is years
# t is within years
# %% is mod (integer division: it's the remainder once a even division)
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
source("\sourcefiles\getRunParms.R") #define runtime parameters
source("/sourcefiles/getRunParms.R") #define runtime parameters
source("sourcefiles/getRunParms.R") #define runtime parameters
source("sourcefiles/getRunParms.R") #define runtime parameters
source("sourcefiles/getGraphParms.R")  #define graphics parameters
source("sourcefiles/getEnvt.R")  #get constant and time-varying envt parms
source("sourcefiles/getSpecies.R")  #get species characteristics and Rstar
N0 <- rep(1,nsp)          # initial number of seeds (per meter square?)
N <- matrix(rep(0), nyrs, nsp) # number of seeds by yr and spp
N[1,] <- N0  #initialize
rcrt <- matrix(rep(0),nyrs,nsp) # recruitment in year y
rcrt0 <- matrix(rep(0),nyrs,nsp) # recruitment WO competition in year y
## Within-season dynamics set-up
Bfin <- matrix(rep(0),nyrs,nsp) # biomass at end of year y
B0  <- matrix(rep(0),nyrs,nsp) # biomass at beginning of year y
Bout <- list() #each year has a dataframe with time,R(t),Bi(t) of dims(2+nsp,tsteps)
source("ResCompN.R") # define within-season ode solver
source("NoCompN.R")  # define within-season ode solver for no competition
BnoCout <- list()
BnoC <- matrix(rep(0),nyrs,nsp) # B without competition at end of year y
E <- matrix(rep(0),nyrs,nsp)
C <- matrix(rep(0),nyrs,nsp)
for (y in c(1:(nyrs-1))){
#get initial biomass for year y
B0[y,] <- b*g[y,]*N[y,]
#use deSolve for ResCompN
R<-R0[y]
B<-B0[y,]
State<-c(R=R,B=B)
Time <- seq(0,ndays,by=dt)
Bout[[y]] <- as.data.frame(ode(func = ResCompN, y = State, parms = Pars, times = Time))
#Bout[[y]] <- as.data.frame(lsodar(func = ResCompN, y = State, parms = Pars, times = Time,rootfun=rootfun))
Bfin[y,] <-  apply(Bout[[y]][3:(2+nsp)],2,FUN=max)  #final biomass
N[y+1,] <- N[y,]*s*(1-g[y,]) + phi*Bfin[y,]    #note Bfin already includes N(t) as init cond
N[y+1,] <- N[y+1,]*(N[y+1,]>ext)  #if density does not exceed ext, set to zero
#use deSolve for NoCompN to solve for noCompetition condition
#would be faster to used solved equation, but calculations were coming out wrong
#tstar is when species cross their Rstar threshold and we stop the season under the no competition condition; checked against ODE solver, it is when the  biomass starts decreasing
tstar <- (1/eps)*(log(R0[y]) - (1/theta)*log(m/(a*c-a*u*m)))
TimeNC <- seq(0,max(tstar)+5*dt,by=dt)
BnoCout[[y]] <- as.data.frame(ode(func = NoCompN, y = State, parms = Pars, times = TimeNC))
BnoC[y,] <- apply(BnoCout[[y]][3:(2+nsp)],2,FUN=max)
rcrt[y,] <- g[y,]*(phi*Bfin[y,]-s)   #to recruit, convert biomass to seeds and overwinter
#rcrt0[y,] <- g[y,]*(phi*BnoC[y,]-s)   #no-competition recruitment
#calculate E and C
E[y,] <- log(g[y,]*phi*BnoC[y,])         #defn 4
C[y,] <- log(BnoC[y,]/Bfin[y,])         #defn 4
}
source("sourcefiles/plotNyears.R")  #plots dynamics of seedbank abundance over years
source("sourcefiles/plotBinSeason.R")  #plot within season dynamics of biomass & R for a subset of years
source("sourcefiles/plotBwCnoC.R")  #plot within season biomass resource dynamics w and wo competition
source("sourcefiles/plotBinSeason_Lizzie.R")
dev.new(width=7, height=6)
# (2) using ggplot, which really is good for this sort of thing
tau.df <- data.frame(coexisted=Bfin[max(y),]>0, tauI=tauI)
tau.df$coexisted[tau.df$coexisted==TRUE] <- "coexisted"
tau.df$coexisted[tau.df$coexisted==FALSE] <- "doomed"
tauP.df <- data.frame(coexisted=rep("tauP"), tauP=tauP)
if (nonsta>0){
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +
geom_density(data=tauP.df[1:(nyrs-nonsta),], aes(tauP),  alpha = 0.2) +
geom_density(data=tauP.df[(nonsta+1):nyrs,], aes(tauP),  alpha = 0.4) +
labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
}else {
ggplot(tau.df, aes(tauI, fill = coexisted)) + geom_histogram(alpha=0.5) +
geom_density(data=tauP.df[1:nyrs,], aes(tauP),  alpha = 0.2) +
labs(title=paste(sum(Bfin[max(y),]>0), "out of", nsp, "coexisted", sep=" "))
}
print(c("The number of coexisting species are",sum(Bfin[max(y),]>0),"out of",nsp))
source('~/GitHub/temporalvar/R/PhenologyModel.r', echo=TRUE)
head(Bfin)
tail(Bfin)
head(BnoCout)
str(BnoCout)
length(BnoCout)
