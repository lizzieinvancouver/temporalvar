#plotting germination fraction
Gi <- 0.8
tauP <-10
tauI <- seq(1,20,1)
h <- 2
g <- Gi*exp(-(tauP-tauI)^2/h^2)
plot(tauP-tauI,g)
library(xtable)
library(tools)
install.packages("xtable")
install.packages("xtable")
library("xtable")
library(tools)
library(xtable)
options(SweaveSyntax="SweaveSyntaxNoweb")
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%START PREAMBLE THAT IS THE SAME FOR ALL EXAMPLES
compilePdf("~/Downloads/SweaveFilesforStudents/sweavetestEli.Rnw")
compilePdf("~/testTexEli.tex")
compilePdf("~/testTexEli.tex")
lines(years,x.ts,type="l",lwd=2,lty=2)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%START PREAMBLE THAT IS THE SAME FOR ALL EXAMPLES
\documentclass{article}
%Required: You must have these
\usepackage{Sweave}
\usepackage{graphicx}
%Strongly recommended
\SweaveOpts{prefix.string=figures/Simple, eps=F}  %put your figures in one place
%you'll want these for pretty captioning
\usepackage[small]{caption}
\setkeys{Gin}{width=0.5\textwidth}  %make the figs 50 perc textwidth
\setlength{\captionmargin}{30pt}
\setlength{\abovecaptionskip}{0pt}
\setlength{\belowcaptionskip}{10pt}
% manual for caption  http://www.dd.chalmers.se/latex/Docs/PDF/caption.pdf
%Optional: I like to muck with my margins and spacing in ways that LaTeX frowns on
%Here's how to do that
\topmargin -1.5cm
\oddsidemargin -0.04cm
\evensidemargin -0.04cm  % same as oddsidemargin but for left-hand pages
\textwidth 16.59cm
\textheight 21.94cm
%\pagestyle{empty}       % Uncomment if don't want page numbers
\parskip 7.2pt           % sets spacing between paragraphs
%\renewcommand{\baselinestretch}{1.5}   % Uncomment for 1.5 spacing between lines
\parindent 0pt		  % sets leading space for paragraphs
\usepackage{setspace}
%\doublespacing
%Optional: I like fancy headers
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead[LO]{ESA 2009}
\fancyhead[RO]{Brief Sweave Introduction}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%END PREAMBLE THAT IS THE SAME FOR ALL EXAMPLES
%Start of the document
\begin{document}
\title{Basic Sweaving}
\author{Eli Holmes}
\date{July 2009}
\maketitle  %put the fancy title on
\tableofcontents      %add a table of contents
\clearpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Put R code in your document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Here is the equation that we will simulate:
\begin{eqnarray}
x_t = x_{t-1}+u +e_t 	& \qquad\textup{where}\; e_t \sim Norm(0,\sigma^2)	\label{eq.} \\
y_t = x_t + \eta_t 	& \qquad\textup{where}\; \eta_t \sim Norm(0,\eta^2) \nonumber
\end{eqnarray}
First, we generate some $x$ data. We specify the population growth ($u$), the two error variances ($\sigma^2$ and $\eta^2$), the number of years of data to  be generated, and the initial $x$:
\subsection{Echo code back to reader}
<<label=initvals>>=
fake.u = -0.1 		# growth rate
fake.Q = 0.02 		# process error variance
fake.R = 0.1 		# non-process error variance
nYr= 50			# number of years of data to generate
fracmissing = 0.1       # fraction of years that are missing
init = 7 			# log of initial pop abundance (~1100 individuals)
years = seq(1:nYr)	# col of years
x.ts = matrix(nrow=nYr) # creates vector for time series w/o measurement error
y.ts = matrix(nrow=nYr)	# creates vector for the time series w/ measurement error
@
\subsection{This time hide the R code from the reader}
We simulate, but we don't show the reader the R code.  Take a look at \verb@Simple.Rnw@ to see what code was run.
Change to \verb@echo=T@ in the Sweave code to show the R code in the text.
<<label=fakedata, echo=F>>=
# Generate a time series from the above parameters.
x.ts[1]=init
for(t in 2:nYr){
e.t = rnorm(1, mean=0, sd=sqrt(fake.Q)) # generate a process error for time step t
x.ts[t] = x.ts[t-1]+ fake.u + e.t
} # end t loop
# now add measurement error to the time series
for(t in 1:nYr){		# for each year... add error (eg. observation err)
y.ts[t]= x.ts[t] + rnorm(1,mean=0,sd=sqrt(fake.R))
} # end t loop
# now add missing years
missYears = sample(years[2:(nYr-1)], floor(fracmissing*nYr), replace = FALSE) # 1st and last yrs must be there
y.ts[missYears]=-99
@
\subsection{Include a value from an R calculation in your text}
Many times you want to calculate something (maybe using echo=F so the reader doesn't see the R code) an display the result in the text.  This is how to do that to show the 2nd value of x.ts.
$x.ts[2]=$\Sexpr{x.ts[2]}.
Hmm, too many digits.  Let's fix that.  I wrap the thing I want to print in a \verb@format@ command so that R doesn't print 9 zillion digits. Using that in the text, I get the following.
$x.ts[2]=$\Sexpr{format(x.ts[2],digits=3)}.
That looks better.
\section{Insert a table using an R matrix or dataframe object}
The R package \verb@xtable@ is used to make tables.  First let's create a dataframe from an
anova analysis and make a table of that.
<<blurfle>>=
n <- 50
x <- seq(1, n)
y.true <- 3 + 1.5 * x
y <- y.true + 17.3 * rnorm(n)
out1 <- lm(y ~ x)
out2 <- lm(y ~ x + I(x^2))
out3 <- lm(y ~ x + I(x^2) + I(x^3))
foo <- anova(out1, out2, out3)
foo <- as.matrix(foo)
foo
@
So now we are ready to turn the matrix \verb@foo@
into Table~\ref{tab:one}.  Look at the \verb@.Rnw@ file and notice that the call is made with \verb@results=tex@.
This puts the table TeX code right into the \verb@Simple.tex@ file.
<<label=tab1,echo=TRUE,results=tex>>=
library(xtable)
print(xtable(foo, caption = "ANOVA Table", label = "tab:one",
digits = c(0, 0, 2, 0, 2, 3, 3)), table.placement = "hbp",
caption.placement = "top")
@
\section{Read in a comma delimited file and make a table}
In this example, we will read in a comma delimited file, write the LaTeX code for the table to a file, and then import
that file into our LaTeX code.
There is some extra R code because the data file is interpreted as text (not numbers).
See the \verb@.Rnw@ for comments on what the extra code does.
This creates Table~\ref{tab:two}. Because I used the \verb@\input@ command in LaTeX to import
my LaTeX table, I have more control over where it is put in the document.  I put it at the end of the document.
<<alldata, echo=T>>=
filename = "data files/WDFW285_data-v3 061608.csv"
tmpa = read.csv(filename, header=F, stringsAsFactors=F)
#I'm in portrait mode for the table and it won't fit more than 5 col
#see the xtable manual (do a web search) to see how to do a sideways table
tmpa=tmpa[,1:5]
#the csv data file has way too many digits; I'm going to cut that down to 2 digits
for(i in 2:ncol(tmpa)) tmpa[7:dim(tmpa)[1],i] = round(as.numeric(tmpa[7:dim(tmpa)[1],i]),2)
#xtable needs to know the columns; figure out the number of cols automatically
tmpaln="c"
for(i in 1:ncol(tmpa)) tmpaln = paste(tmpaln,"c",sep="")
thetable = xtable(tmpa, caption='The total Puget Sound rockfish CPUE, commercial data.', label='tab:two', align=tmpaln, digits=2)
print(thetable,type = "latex", file = "tables\\exampletable.tex", include.rownames=FALSE,include.colnames=FALSE, caption.placement="top",
table.placement="htb", sanitize.text.function = function(x){x},hline.after = c(-1,6,nrow(tmpa)))
@
\section{Now insert a figure}
Here I plot the simulated data that were computed in the previous section.  They are shown in Figure \ref{fig:fig1}.   Play with the width and height specifications and see what happens.   I've shown the code by using
\verb@echo=T@, but normally you would hide the figure code using \verb@echo=F@.
\begin{figure}[width=4in]
\begin{center}
<<label=fig1,fig=TRUE,echo=TRUE, height=4, width=4>>=
par(mfrow=c(1,1))
plot(years[y.ts!=-99], y.ts[y.ts!=-99],xlab="",ylab="log abundance",lwd=2,bty="l")
lines(years,x.ts,type="l",lwd=2,lty=2)
title("Exp. growth observed with error")
legend("topright", c("Observed","True"),lty = c(-1, 2), pch = c(1, -1))
@
\end{center}
\caption{Plot of the simulated population data with measurement error.}
\label{fig:fig1}
\end{figure}
\section{Next step for learning Sweave}
The following is an excellent site for learning Sweave.  After working through the demos, you'll be making your own Sweave files.
\newline
An Sweave Demo site: \verb@http://www.stat.umn.edu/~charlie/Sweave/@
\input{tables/exampletable}
\end{document}
compilePdf("~/Downloads/SweaveFilesforStudents/sweavetestEli.Rnw")
compilePdf("~/Downloads/SweaveFilesforStudents/sweavetestEli.Rnw")
compilePdf("~/Downloads/SweaveFilesforStudents/sweavetestEli.Rnw")
##
### Started 10 July 2011 ###
### By Lizzie & Megan ###
## VarEnvironments & Coexistence ##
# define all parameters
n <- 2    # number of spp
nyrs <- 10  # number of yrs
ndays <- 10  # number of days in a growing season
dt <- 0.001 # within yr timestep
##
## species characteristics
##
b <-  c(1,1)          # biomass of seedling
s <-  c(0.8,0.8)      # seedbank survival overwinter
a <-  c(20,20)        # slope of species uptake rate with increasing R
d <-  c(1,1)          # inverse of the max uptake rate
c <-  c(12,12)        # conversion of resource to biomass
m <-  c(0.05,.05)     # mortality
G <-  c(0.5, 0.5)     # max germination fraction
h <-  100             # max rate of germination decrease following pulse
phi <- c(0.05,0.05)     # conversion of end-of-season plant biomass to seeds
tauI <- c(0.35, 0.4)    # time of max germ for sp i
theta <- c(1,1)         # shape of species i uptake curve
N0 <- c(10,10)          # initial number of seeds
Rstar <- (m/(a*(c-m*d)))^(1/theta)
##
## time-varying env variables
##
R0 <- matrix(rep(5), nyrs,1) # rlnorm(nyrs, 1, 1) # intial R in a season
eps <- 1              # evaporative stress
tauP <- 0.3           # timing of pulse
##
## Within-growing season dynamics set-up
##
R <- matrix(rep(0), nyrs, ndays/dt) # R is the resource level through the growing season (each yr)
B <- array(rep(0), dim=c(nyrs,n,ndays/dt)) # where B is an array with yr (nyrs), spp biomass
# through growing season (ndays)
N <- matrix(rep(0), nyrs, n) # number of seeds by yr and spp
Bfin <- matrix(rep(0),nyrs,n) # biomass at end of year y
##
## change to mapply someday?
## for now, a loop
##
for (y in c(1:nyrs)){
g <- G*exp(-h*(tauP-tauI)2)
t <- 1
R[y,t] <- R0[y]
print(y)
if(y==1) N[y,] <- N0
else N[y,] <- s*(N[y-1,]*(1-g)+phi*Bfin[y-1,])
B[y,, t] <- b*g*N[y,]
f <- (a*R[y,1]^theta)/(1+a*d*R[y,1]^theta)
print(f)
while (R[y,t]>min(Rstar)){
t <- t+1
f <- (a*R[y,t-1]^theta)/(1+a*d*R[y,t-1]^theta)
if((sum(c*f<m)>0)) print(paste("c*f-m=", c*f-m,", t=",t))
B[y,,t] <- B[y,,t-1]+(c*f-m)*B[y,,t-1]*dt
R[y,t] <- R[y, t-1]-dt*(t(B[y,,t-1]) %*% f + eps*R[y,t-1])
J <- which(R[y, t-1]-Rstar < 0)
B[y,,t][J] <- 0
}
Bfin[y,] <- apply(B[y,,], 1, max)
}
